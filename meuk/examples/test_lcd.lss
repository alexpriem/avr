
test_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000472  00000000  00000000  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000472  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000600  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000b4  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d4  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b7  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f0  00000000  00000000  0000128f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000645  00000000  00000000  0000157f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019f  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000286  00000000  00000000  00001e83  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__init>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	07 08       	sbc	r0, r7
  56:	13 14       	cp	r1, r3
  58:	14 13       	cpse	r17, r20
  5a:	08 07       	cpc	r16, r24
  5c:	00 10       	cpse	r0, r0
  5e:	08 08       	sbc	r0, r8
  60:	08 08       	sbc	r0, r8
  62:	10 00       	.word	0x0010	; ????

00000064 <__c.1759>:
  64:	4c 69 6e 65 20 32 20 6c 6f 6e 67 65 72 20 74 68     Line 2 longer th
  74:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
	...

00000085 <__c.1757>:
  85:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  95:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  a5:	0a 00 00                                            ...

000000a8 <__init>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf e5       	ldi	r28, 0x5F	; 95
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	10 e0       	ldi	r17, 0x00	; 0
  b6:	a0 e6       	ldi	r26, 0x60	; 96
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e2 e7       	ldi	r30, 0x72	; 114
  bc:	f4 e0       	ldi	r31, 0x04	; 4
  be:	02 c0       	rjmp	.+4      	; 0xc4 <.do_copy_data_start>

000000c0 <.do_copy_data_loop>:
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0

000000c4 <.do_copy_data_start>:
  c4:	aa 38       	cpi	r26, 0x8A	; 138
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <.do_copy_data_loop>

000000ca <__do_clear_bss>:
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	aa e8       	ldi	r26, 0x8A	; 138
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	aa 38       	cpi	r26, 0x8A	; 138
  d6:	b1 07       	cpc	r27, r17
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  de:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000e6 <wait_until_key_pressed>:
void wait_until_key_pressed(void);


void wait_until_key_pressed(void)
{
  e6:	90 b3       	in	r25, 0x10	; 16
    unsigned char temp1, temp2;
    unsigned int i;
    
    do {
        temp1 = PIND;                  // read input
        for(i=0;i<65535;i++);
        temp2 = PIND;                  // read input
  e8:	80 b3       	in	r24, 0x10	; 16
        temp1 = (temp1 & temp2);       // debounce input
    } while ( temp1 & _BV(PIND2) );
  ea:	89 23       	and	r24, r25
  ec:	82 fd       	sbrc	r24, 2
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <wait_until_key_pressed>
    
    loop_until_bit_is_set(PIND,PIND2);            /* wait until key is released */
  f0:	82 9b       	sbis	0x10, 2	; 16
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <wait_until_key_pressed+0xa>
  f4:	08 95       	ret

000000f6 <main>:
}


int main(void)
{
  f6:	c8 e5       	ldi	r28, 0x58	; 88
  f8:	d8 e0       	ldi	r29, 0x08	; 8
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    
    DDRD &=~ (1 << PD2);        /* Pin PD2 input              */
  fe:	8a 98       	cbi	0x11, 2	; 17
    PORTD |= (1 << PD2);        /* Pin PD2 pull-up enabled    */
 100:	92 9a       	sbi	0x12, 2	; 18


    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_init>
 108:	51 e7       	ldi	r21, 0x71	; 113
 10a:	25 2e       	mov	r2, r21
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	35 2e       	mov	r3, r21
 110:	48 e7       	ldi	r20, 0x78	; 120
 112:	44 2e       	mov	r4, r20
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	54 2e       	mov	r5, r20
 118:	35 e8       	ldi	r19, 0x85	; 133
 11a:	63 2e       	mov	r6, r19
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	73 2e       	mov	r7, r19
 120:	24 e6       	ldi	r18, 0x64	; 100
 122:	82 2e       	mov	r8, r18
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	92 2e       	mov	r9, r18

    for (;;) {                           /* loop forever */
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("LCD Test Line 1\n");

        /* cursor is now on second line, write second line */
        lcd_puts("Line 2");
        
        /* move cursor to position 8 on line 2 */
        lcd_gotoxy(7,1);  
        
        /* write single char to display */
        lcd_putc(':');
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
        
        
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);

        /* put string */
        lcd_puts( "CurOn");
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();


        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */

        /* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
        lcd_puts_P( "Line 2 longer than 14 characters" );
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
        
        
        /*
         *   Test: Display integer values
         */
        
        lcd_clrscr();   /* clear display home cursor */
        
        /* convert interger into string */
        itoa( num , buffer, 10);
 128:	7e 01       	movw	r14, r28
 12a:	08 94       	sec
 12c:	e1 1c       	adc	r14, r1
 12e:	f1 1c       	adc	r15, r1
 130:	9e e7       	ldi	r25, 0x7E	; 126
 132:	a9 2e       	mov	r10, r25
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	b9 2e       	mov	r11, r25
 138:	84 e5       	ldi	r24, 0x54	; 84
 13a:	c8 2e       	mov	r12, r24
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	d8 2e       	mov	r13, r24
 140:	0e 94 81 01 	call	0x302	; 0x302 <lcd_clrscr>
 144:	80 e6       	ldi	r24, 0x60	; 96
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_puts>
 14c:	c1 01       	movw	r24, r2
 14e:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_puts>
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	87 e0       	ldi	r24, 0x07	; 7
 156:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_gotoxy>
 15a:	8a e3       	ldi	r24, 0x3A	; 58
 15c:	0e 94 89 01 	call	0x312	; 0x312 <lcd_putc>
 160:	0e 94 73 00 	call	0xe6	; 0xe6 <wait_until_key_pressed>
 164:	8e e0       	ldi	r24, 0x0E	; 14
 166:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
 16a:	c2 01       	movw	r24, r4
 16c:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_puts>
 170:	0e 94 73 00 	call	0xe6	; 0xe6 <wait_until_key_pressed>
 174:	0e 94 81 01 	call	0x302	; 0x302 <lcd_clrscr>
 178:	c3 01       	movw	r24, r6
 17a:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_puts_p>
 17e:	c4 01       	movw	r24, r8
 180:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_puts_p>
 184:	88 e1       	ldi	r24, 0x18	; 24
 186:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
 18a:	0e 94 73 00 	call	0xe6	; 0xe6 <wait_until_key_pressed>
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
 194:	0e 94 81 01 	call	0x302	; 0x302 <lcd_clrscr>
 198:	4a e0       	ldi	r20, 0x0A	; 10
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	b7 01       	movw	r22, r14
 19e:	86 e8       	ldi	r24, 0x86	; 134
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <itoa>
        
        /* put converted string to display */
        lcd_puts(buffer);
 1a6:	c7 01       	movw	r24, r14
 1a8:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 1ac:	0e 94 73 00 	call	0xe6	; 0xe6 <wait_until_key_pressed>
        
        
        /*
         *  Test: Display userdefined characters
         */

       lcd_clrscr();   /* clear display home cursor */
 1b0:	0e 94 81 01 	call	0x302	; 0x302 <lcd_clrscr>
       
       lcd_puts("Copyright: ");
 1b4:	c5 01       	movw	r24, r10
 1b6:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_puts>
       
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 1ba:	80 e4       	ldi	r24, 0x40	; 64
 1bc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
 1c0:	86 01       	movw	r16, r12
       for(i=0; i<16; i++)
       {
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 1c2:	f8 01       	movw	r30, r16
 1c4:	84 91       	lpm	r24, Z
 1c6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_data>
 1ca:	0f 5f       	subi	r16, 0xFF	; 255
 1cc:	1f 4f       	sbci	r17, 0xFF	; 255
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	04 36       	cpi	r16, 0x64	; 100
 1d2:	1f 07       	cpc	r17, r31
 1d4:	b1 f7       	brne	.-20     	; 0x1c2 <main+0xcc>
       }
       
       /* move cursor to position 0 on line 2 */
       /* Note: this switched back to DD RAM adresses */
       lcd_gotoxy(0,1);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_gotoxy>
       
       /* display user defined (c), built using two user defined chars */
       lcd_putc(0);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 89 01 	call	0x312	; 0x312 <lcd_putc>
       lcd_putc(1);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 89 01 	call	0x312	; 0x312 <lcd_putc>
       

       /* wait until push button PD2 (INT0) is pressed */
       wait_until_key_pressed();
 1ea:	0e 94 73 00 	call	0xe6	; 0xe6 <wait_until_key_pressed>
 1ee:	a8 cf       	rjmp	.-176    	; 0x140 <main+0x4a>

000001f0 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
 1f0:	db 9a       	sbi	0x1b, 3	; 27
    lcd_e_high();
    lcd_e_delay();
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <toggle_e+0x4>
    lcd_e_low();
 1f4:	db 98       	cbi	0x1b, 3	; 27
 1f6:	08 95       	ret

000001f8 <lcd_write>:
}
#endif


/*************************************************************************
Low-level function to write byte to LCD controller
Input:    data   byte to write to LCD
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 1fc:	66 23       	and	r22, r22
 1fe:	11 f0       	breq	.+4      	; 0x204 <lcd_write+0xc>
       lcd_rs_high();
 200:	df 9a       	sbi	0x1b, 7	; 27
 202:	01 c0       	rjmp	.+2      	; 0x206 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 204:	df 98       	cbi	0x1b, 7	; 27
    }
    lcd_rw_low();
 206:	dd 98       	cbi	0x1b, 5	; 27

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 208:	d0 9a       	sbi	0x1a, 0	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 20a:	d2 9a       	sbi	0x1a, 2	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 20c:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 20e:	d6 9a       	sbi	0x1a, 6	; 26
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 210:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 212:	dc 98       	cbi	0x1b, 4	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 214:	da 98       	cbi	0x1b, 2	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 216:	d8 98       	cbi	0x1b, 0	; 27
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 218:	87 fd       	sbrc	r24, 7
 21a:	de 9a       	sbi	0x1b, 6	; 27
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 21c:	c8 2f       	mov	r28, r24
 21e:	dd 27       	eor	r29, r29
 220:	c6 fd       	sbrc	r28, 6
 222:	dc 9a       	sbi	0x1b, 4	; 27
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 224:	c5 fd       	sbrc	r28, 5
 226:	da 9a       	sbi	0x1b, 2	; 27
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 228:	c4 fd       	sbrc	r28, 4
 22a:	d8 9a       	sbi	0x1b, 0	; 27
        lcd_e_toggle();
 22c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 230:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 232:	dc 98       	cbi	0x1b, 4	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 234:	da 98       	cbi	0x1b, 2	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 236:	d8 98       	cbi	0x1b, 0	; 27
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 238:	c3 fd       	sbrc	r28, 3
 23a:	de 9a       	sbi	0x1b, 6	; 27
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 23c:	c2 fd       	sbrc	r28, 2
 23e:	dc 9a       	sbi	0x1b, 4	; 27
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 240:	c1 fd       	sbrc	r28, 1
 242:	da 9a       	sbi	0x1b, 2	; 27
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 244:	c0 fd       	sbrc	r28, 0
 246:	d8 9a       	sbi	0x1b, 0	; 27
        lcd_e_toggle();        
 248:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 24c:	d8 9a       	sbi	0x1b, 0	; 27
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 24e:	da 9a       	sbi	0x1b, 2	; 27
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 250:	dc 9a       	sbi	0x1b, 4	; 27
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 252:	de 9a       	sbi	0x1b, 6	; 27
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <lcd_read>:
    }
}
#else
#define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LCD_IO_FUNCTION) = d;
/* rs==0 -> write instruction to LCD_IO_FUNCTION */
/* rs==1 -> write data to LCD_IO_DATA */
#endif


/*************************************************************************
Low-level function to read byte from LCD controller
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
 25a:	88 23       	and	r24, r24
 25c:	11 f0       	breq	.+4      	; 0x262 <lcd_read+0x8>
    uint8_t data;
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
 25e:	df 9a       	sbi	0x1b, 7	; 27
 260:	01 c0       	rjmp	.+2      	; 0x264 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 262:	df 98       	cbi	0x1b, 7	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
 264:	dd 9a       	sbi	0x1b, 5	; 27
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
        lcd_e_low();
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 266:	d0 98       	cbi	0x1a, 0	; 26
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 268:	d2 98       	cbi	0x1a, 2	; 26
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 26a:	d4 98       	cbi	0x1a, 4	; 26
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 26c:	d6 98       	cbi	0x1a, 6	; 26
                
        /* read high nibble first */
        lcd_e_high();
 26e:	db 9a       	sbi	0x1b, 3	; 27
        lcd_e_delay();        
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 272:	c8 9b       	sbis	0x19, 0	; 25
 274:	02 c0       	rjmp	.+4      	; 0x27a <lcd_read+0x20>
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	01 c0       	rjmp	.+2      	; 0x27c <lcd_read+0x22>
 27a:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 27c:	ca 99       	sbic	0x19, 2	; 25
 27e:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 280:	cc 99       	sbic	0x19, 4	; 25
 282:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 284:	ce 99       	sbic	0x19, 6	; 25
 286:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 288:	db 98       	cbi	0x1b, 3	; 27

        lcd_e_delay();                       /* Enable 500ns low       */
 28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 28c:	db 9a       	sbi	0x1b, 3	; 27
        lcd_e_delay();
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 290:	c8 99       	sbic	0x19, 0	; 25
 292:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 294:	ca 99       	sbic	0x19, 2	; 25
 296:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 298:	cc 99       	sbic	0x19, 4	; 25
 29a:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 29c:	ce 99       	sbic	0x19, 6	; 25
 29e:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 2a0:	db 98       	cbi	0x1b, 3	; 27
    }
    return data;
}
 2a2:	99 27       	eor	r25, r25
 2a4:	08 95       	ret

000002a6 <lcd_waitbusy>:
#else
#define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LCD_IO_FUNCTION+LCD_IO_READ)
/* rs==0 -> read instruction from LCD_IO_FUNCTION */
/* rs==1 -> read data from LCD_IO_DATA */
#endif


/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_read>
 2ac:	87 fd       	sbrc	r24, 7
 2ae:	fb cf       	rjmp	.-10     	; 0x2a6 <lcd_waitbusy>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_waitbusy+0xe>
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_read>
    
}/* lcd_waitbusy */
 2be:	99 27       	eor	r25, r25
 2c0:	08 95       	ret

000002c2 <lcd_command>:


/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    register uint8_t addressCounter;


#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
#if KS0073_4LINES_MODE
    if ( pos < LCD_START_LINE2 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);

}/* lcd_newline */


/*
** PUBLIC FUNCTIONS 
*/

/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 2c2:	1f 93       	push	r17
 2c4:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 2c6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_waitbusy>
    lcd_write(cmd,0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	81 2f       	mov	r24, r17
 2ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_write>
 2d2:	1f 91       	pop	r17
 2d4:	08 95       	ret

000002d6 <lcd_data>:
}


/*************************************************************************
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 2d6:	1f 93       	push	r17
 2d8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 2da:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_waitbusy>
    lcd_write(data,1);
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	81 2f       	mov	r24, r17
 2e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_write>
 2e6:	1f 91       	pop	r17
 2e8:	08 95       	ret

000002ea <lcd_gotoxy>:
}



/*************************************************************************
Set cursor to specified position
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 2ea:	66 23       	and	r22, r22
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <lcd_gotoxy+0x8>
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2ee:	80 58       	subi	r24, 0x80	; 128
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2f2:	80 54       	subi	r24, 0x40	; 64
 2f4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
 2f8:	08 95       	ret

000002fa <lcd_getxy>:
#endif
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else if ( y==1)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    else if ( y==2)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
 2fa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_waitbusy>
    return lcd_waitbusy();
}
 2fe:	99 27       	eor	r25, r25
 300:	08 95       	ret

00000302 <lcd_clrscr>:


/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
 308:	08 95       	ret

0000030a <lcd_home>:
    lcd_command(1<<LCD_CLR);
}


/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
 310:	08 95       	ret

00000312 <lcd_putc>:
    lcd_command(1<<LCD_HOME);
}


/*************************************************************************
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 312:	1f 93       	push	r17
 314:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 316:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_waitbusy>
    if (c=='\n')
 31a:	1a 30       	cpi	r17, 0x0A	; 10
 31c:	49 f4       	brne	.+18     	; 0x330 <lcd_putc+0x1e>
 31e:	80 34       	cpi	r24, 0x40	; 64
 320:	10 f4       	brcc	.+4      	; 0x326 <lcd_putc+0x14>
 322:	80 e4       	ldi	r24, 0x40	; 64
 324:	01 c0       	rjmp	.+2      	; 0x328 <lcd_putc+0x16>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	80 58       	subi	r24, 0x80	; 128
 32a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
 32e:	04 c0       	rjmp	.+8      	; 0x338 <lcd_putc+0x26>
    {
        lcd_newline(pos);
    }
    else
    {
#if LCD_WRAP_LINES==1
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	81 2f       	mov	r24, r17
 334:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_write>
 338:	1f 91       	pop	r17
 33a:	08 95       	ret

0000033c <lcd_puts>:
    }

}/* lcd_putc */


/*************************************************************************
Display string without auto linefeed 
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	ec 01       	movw	r28, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 344:	0e 94 89 01 	call	0x312	; 0x312 <lcd_putc>
 348:	89 91       	ld	r24, Y+
 34a:	88 23       	and	r24, r24
 34c:	d9 f7       	brne	.-10     	; 0x344 <lcd_puts+0x8>
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <lcd_puts_p>:
    }

}/* lcd_puts */


/*************************************************************************
Display string from program memory without auto linefeed 
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	ec 01       	movw	r28, r24
 35a:	02 c0       	rjmp	.+4      	; 0x360 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 35c:	0e 94 89 01 	call	0x312	; 0x312 <lcd_putc>
 360:	fe 01       	movw	r30, r28
 362:	21 96       	adiw	r28, 0x01	; 1
 364:	84 91       	lpm	r24, Z
 366:	88 23       	and	r24, r24
 368:	c9 f7       	brne	.-14     	; 0x35c <lcd_puts_p+0x8>
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <lcd_init>:
    }

}/* lcd_puts_p */


/*************************************************************************
Initialize display and select type of cursor 
Input:    dispAttr LCD_DISP_OFF            display off
                   LCD_DISP_ON             display on, cursor off
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	f8 2e       	mov	r15, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */
     
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 378:	0a e3       	ldi	r16, 0x3A	; 58
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	d7 9a       	sbi	0x1a, 7	; 26
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 37e:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 380:	d3 9a       	sbi	0x1a, 3	; 26
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 382:	d0 9a       	sbi	0x1a, 0	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 384:	d2 9a       	sbi	0x1a, 2	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 386:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 388:	d6 9a       	sbi	0x1a, 6	; 26
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	99 e3       	ldi	r25, 0x39	; 57
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_init+0x1e>
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 392:	da 9a       	sbi	0x1b, 2	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 394:	d8 9a       	sbi	0x1b, 0	; 27
    lcd_e_toggle();
 396:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <toggle_e>
 39a:	80 ef       	ldi	r24, 0xF0	; 240
 39c:	91 e1       	ldi	r25, 0x11	; 17
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <lcd_init+0x2e>
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 3a2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <toggle_e>
 3a6:	c8 01       	movw	r24, r16
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_init+0x38>
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 3ac:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <toggle_e>
 3b0:	c8 01       	movw	r24, r16
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd_init+0x42>
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3b6:	d8 98       	cbi	0x1b, 0	; 27
    lcd_e_toggle();
 3b8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <toggle_e>
 3bc:	c8 01       	movw	r24, r16
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_init+0x4e>
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
#else
    /*
     * Initialize LCD to 8 bit memory mapped mode
     */
    
    /* enable external SRAM (memory mapped lcd) and one wait state */        
    MCUCR = _BV(SRE) | _BV(SRW);

    /* reset LCD */
    delay(16000);                           /* wait 16ms after power-on     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
    delay(4992);                            /* wait 5ms                     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(64);                              /* wait 64us                    */
#endif

#if KS0073_4LINES_MODE
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3c8:	88 e0       	ldi	r24, 0x08	; 8
 3ca:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 3ce:	0e 94 81 01 	call	0x302	; 0x302 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3d2:	86 e0       	ldi	r24, 0x06	; 6
 3d4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 3d8:	8f 2d       	mov	r24, r15
 3da:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_command>
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	08 95       	ret

000003e6 <itoa>:
 3e6:	fb 01       	movw	r30, r22
 3e8:	9f 01       	movw	r18, r30
 3ea:	e8 94       	clt
 3ec:	42 30       	cpi	r20, 0x02	; 2
 3ee:	c4 f0       	brlt	.+48     	; 0x420 <itoa+0x3a>
 3f0:	45 32       	cpi	r20, 0x25	; 37
 3f2:	b4 f4       	brge	.+44     	; 0x420 <itoa+0x3a>
 3f4:	4a 30       	cpi	r20, 0x0A	; 10
 3f6:	29 f4       	brne	.+10     	; 0x402 <itoa+0x1c>
 3f8:	97 fb       	bst	r25, 7
 3fa:	1e f4       	brtc	.+6      	; 0x402 <itoa+0x1c>
 3fc:	90 95       	com	r25
 3fe:	81 95       	neg	r24
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	64 2f       	mov	r22, r20
 404:	77 27       	eor	r23, r23
 406:	0e 94 24 02 	call	0x448	; 0x448 <__udivmodhi4>
 40a:	80 5d       	subi	r24, 0xD0	; 208
 40c:	8a 33       	cpi	r24, 0x3A	; 58
 40e:	0c f0       	brlt	.+2      	; 0x412 <itoa+0x2c>
 410:	89 5d       	subi	r24, 0xD9	; 217
 412:	81 93       	st	Z+, r24
 414:	cb 01       	movw	r24, r22
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	a1 f7       	brne	.-24     	; 0x402 <itoa+0x1c>
 41a:	16 f4       	brtc	.+4      	; 0x420 <itoa+0x3a>
 41c:	5d e2       	ldi	r21, 0x2D	; 45
 41e:	51 93       	st	Z+, r21
 420:	10 82       	st	Z, r1
 422:	c9 01       	movw	r24, r18
 424:	0c 94 14 02 	jmp	0x428	; 0x428 <strrev>

00000428 <strrev>:
 428:	dc 01       	movw	r26, r24
 42a:	fc 01       	movw	r30, r24
 42c:	67 2f       	mov	r22, r23
 42e:	71 91       	ld	r23, Z+
 430:	77 23       	and	r23, r23
 432:	e1 f7       	brne	.-8      	; 0x42c <strrev+0x4>
 434:	32 97       	sbiw	r30, 0x02	; 2
 436:	04 c0       	rjmp	.+8      	; 0x440 <strrev+0x18>
 438:	7c 91       	ld	r23, X
 43a:	6d 93       	st	X+, r22
 43c:	70 83       	st	Z, r23
 43e:	62 91       	ld	r22, -Z
 440:	ae 17       	cp	r26, r30
 442:	bf 07       	cpc	r27, r31
 444:	c8 f3       	brcs	.-14     	; 0x438 <strrev+0x10>
 446:	08 95       	ret

00000448 <__udivmodhi4>:
 448:	aa 1b       	sub	r26, r26
 44a:	bb 1b       	sub	r27, r27
 44c:	51 e1       	ldi	r21, 0x11	; 17
 44e:	07 c0       	rjmp	.+14     	; 0x45e <__udivmodhi4_ep>

00000450 <__udivmodhi4_loop>:
 450:	aa 1f       	adc	r26, r26
 452:	bb 1f       	adc	r27, r27
 454:	a6 17       	cp	r26, r22
 456:	b7 07       	cpc	r27, r23
 458:	10 f0       	brcs	.+4      	; 0x45e <__udivmodhi4_ep>
 45a:	a6 1b       	sub	r26, r22
 45c:	b7 0b       	sbc	r27, r23

0000045e <__udivmodhi4_ep>:
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	5a 95       	dec	r21
 464:	a9 f7       	brne	.-22     	; 0x450 <__udivmodhi4_loop>
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	bc 01       	movw	r22, r24
 46c:	cd 01       	movw	r24, r26
 46e:	08 95       	ret

00000470 <_exit>:
 470:	ff cf       	rjmp	.-2      	; 0x470 <_exit>
