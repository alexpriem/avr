GAS LISTING /tmp/ccGoRhtD.s 			page 1


   1               		.file	"lcd.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
   9               		.stabs	"/home/alex/avr/counter/",100,0,2,.Ltext0
  10               		.stabs	"lcd.c",100,0,2,.Ltext0
  11               		.text
  12               	.Ltext0:
  13               		.stabs	"gcc2_compiled.",60,0,0,0
  14               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  15               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  16               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  17               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  18               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  19               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  20               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"void:t(0,15)=(0,15)",128,0,0,0
  29               		.stabs	"/usr/local/AVR/lib/gcc/avr/4.2.1/../../../../avr/include/inttypes.h",130,0,0,0
  30               		.stabs	"/usr/local/AVR/lib/gcc/avr/4.2.1/../../../../avr/include/stdint.h",130,0,0,0
  31               		.stabs	"int8_t:t(2,1)=(0,10)",128,0,121,0
  32               		.stabs	"uint8_t:t(2,2)=(0,11)",128,0,122,0
  33               		.stabs	"int16_t:t(2,3)=(0,1)",128,0,123,0
  34               		.stabs	"uint16_t:t(2,4)=(0,4)",128,0,124,0
  35               		.stabs	"int32_t:t(2,5)=(0,3)",128,0,125,0
  36               		.stabs	"uint32_t:t(2,6)=(0,5)",128,0,126,0
  37               		.stabs	"int64_t:t(2,7)=(0,6)",128,0,128,0
  38               		.stabs	"uint64_t:t(2,8)=(0,7)",128,0,129,0
  39               		.stabs	"intptr_t:t(2,9)=(2,3)",128,0,142,0
  40               		.stabs	"uintptr_t:t(2,10)=(2,4)",128,0,147,0
  41               		.stabs	"int_least8_t:t(2,11)=(2,1)",128,0,159,0
  42               		.stabs	"uint_least8_t:t(2,12)=(2,2)",128,0,164,0
  43               		.stabs	"int_least16_t:t(2,13)=(2,3)",128,0,169,0
  44               		.stabs	"uint_least16_t:t(2,14)=(2,4)",128,0,174,0
  45               		.stabs	"int_least32_t:t(2,15)=(2,5)",128,0,179,0
  46               		.stabs	"uint_least32_t:t(2,16)=(2,6)",128,0,184,0
  47               		.stabs	"int_least64_t:t(2,17)=(2,7)",128,0,192,0
  48               		.stabs	"uint_least64_t:t(2,18)=(2,8)",128,0,199,0
  49               		.stabs	"int_fast8_t:t(2,19)=(2,1)",128,0,213,0
  50               		.stabs	"uint_fast8_t:t(2,20)=(2,2)",128,0,218,0
  51               		.stabs	"int_fast16_t:t(2,21)=(2,3)",128,0,223,0
  52               		.stabs	"uint_fast16_t:t(2,22)=(2,4)",128,0,228,0
  53               		.stabs	"int_fast32_t:t(2,23)=(2,5)",128,0,233,0
  54               		.stabs	"uint_fast32_t:t(2,24)=(2,6)",128,0,238,0
  55               		.stabs	"int_fast64_t:t(2,25)=(2,7)",128,0,246,0
  56               		.stabs	"uint_fast64_t:t(2,26)=(2,8)",128,0,253,0
  57               		.stabs	"intmax_t:t(2,27)=(2,7)",128,0,273,0
GAS LISTING /tmp/ccGoRhtD.s 			page 2


  58               		.stabs	"uintmax_t:t(2,28)=(2,8)",128,0,278,0
  59               		.stabn	162,0,0,0
  60               		.stabs	"int_farptr_t:t(1,1)=(2,5)",128,0,77,0
  61               		.stabs	"uint_farptr_t:t(1,2)=(2,6)",128,0,81,0
  62               		.stabn	162,0,0,0
  63               		.stabs	"/usr/local/AVR/lib/gcc/avr/4.2.1/../../../../avr/include/avr/pgmspace.h",130,0,0,0
  64               		.stabs	"/usr/local/AVR/lib/gcc/avr/4.2.1/include/stddef.h",130,0,0,0
  65               		.stabs	"size_t:t(4,1)=(0,4)",128,0,214,0
  66               		.stabn	162,0,0,0
  67               		.stabs	"prog_void:t(3,1)=(3,2)=(3,2)",128,0,210,0
  68               		.stabs	"prog_char:t(3,3)=(3,4)=@s8;r(3,4);0;255;",128,0,211,0
  69               		.stabs	"prog_uchar:t(3,5)=(3,4)",128,0,212,0
  70               		.stabs	"prog_int8_t:t(3,6)=(3,7)=(0,10)",128,0,214,0
  71               		.stabs	"prog_uint8_t:t(3,8)=(3,4)",128,0,215,0
  72               		.stabs	"prog_int16_t:t(3,9)=(3,10)=(0,1)",128,0,216,0
  73               		.stabs	"prog_uint16_t:t(3,11)=(3,12)=(0,4)",128,0,217,0
  74               		.stabs	"prog_int32_t:t(3,13)=(3,14)=(0,3)",128,0,218,0
  75               		.stabs	"prog_uint32_t:t(3,15)=(3,16)=(0,5)",128,0,219,0
  76               		.stabs	"prog_int64_t:t(3,17)=(3,18)=(0,6)",128,0,221,0
  77               		.stabs	"prog_uint64_t:t(3,19)=(3,20)=(0,7)",128,0,222,0
  78               		.stabn	162,0,0,0
  79               		.stabs	"toggle_e:f(0,15)",36,0,121,toggle_e
  80               		.type	toggle_e, @function
  81               	toggle_e:
  82               		.stabd	46,0,0
   1:lcd.c         **** /****************************************************************************
   2:lcd.c         ****  Title	:   HD44780U LCD library
   3:lcd.c         ****  Author:    Peter Fleury <pfleury@gmx.ch>  http://jump.to/fleury
   4:lcd.c         ****  File:	    $Id: lcd.c,v 1.14.2.1 2006/01/29 12:16:41 peter Exp $
   5:lcd.c         ****  Software:  AVR-GCC 3.3 
   6:lcd.c         ****  Target:    any AVR device, memory mapped mode only for AT90S4414/8515/Mega
   7:lcd.c         **** 
   8:lcd.c         ****  DESCRIPTION
   9:lcd.c         ****        Basic routines for interfacing a HD44780U-based text lcd display
  10:lcd.c         **** 
  11:lcd.c         ****        Originally based on Volker Oth's lcd library,
  12:lcd.c         ****        changed lcd_init(), added additional constants for lcd_command(),
  13:lcd.c         ****        added 4-bit I/O mode, improved and optimized code.
  14:lcd.c         **** 
  15:lcd.c         ****        Library can be operated in memory mapped mode (LCD_IO_MODE=0) or in 
  16:lcd.c         ****        4-bit IO port mode (LCD_IO_MODE=1). 8-bit IO port mode not supported.
  17:lcd.c         ****        
  18:lcd.c         ****        Memory mapped mode compatible with Kanda STK200, but supports also
  19:lcd.c         ****        generation of R/W signal through A8 address line.
  20:lcd.c         **** 
  21:lcd.c         ****  USAGE
  22:lcd.c         ****        See the C include lcd.h file for a description of each function
  23:lcd.c         ****        
  24:lcd.c         **** *****************************************************************************/
  25:lcd.c         **** #include <inttypes.h>
  26:lcd.c         **** #include <avr/io.h>
  27:lcd.c         **** #include <avr/pgmspace.h>
  28:lcd.c         **** #include "lcd.h"
  29:lcd.c         **** 
  30:lcd.c         **** 
  31:lcd.c         **** 
  32:lcd.c         **** /* 
GAS LISTING /tmp/ccGoRhtD.s 			page 3


  33:lcd.c         **** ** constants/macros 
  34:lcd.c         **** */
  35:lcd.c         **** #define DDR(x) (*(&x - 1))      /* address of data direction register of port x */
  36:lcd.c         **** #if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  37:lcd.c         ****     /* on ATmega64/128 PINF is on port 0x00 and not 0x60 */
  38:lcd.c         ****     #define PIN(x) ( &PORTF==&(x) ? _SFR_IO8(0x00) : (*(&x - 2)) )
  39:lcd.c         **** #else
  40:lcd.c         **** 	#define PIN(x) (*(&x - 2))    /* address of input register of port x          */
  41:lcd.c         **** #endif
  42:lcd.c         **** 
  43:lcd.c         **** 
  44:lcd.c         **** #if LCD_IO_MODE
  45:lcd.c         **** #define lcd_e_delay()   __asm__ __volatile__( "rjmp 1f\n 1:" );
  46:lcd.c         **** #define lcd_e_high()    LCD_E_PORT  |=  _BV(LCD_E_PIN);
  47:lcd.c         **** #define lcd_e_low()     LCD_E_PORT  &= ~_BV(LCD_E_PIN);
  48:lcd.c         **** #define lcd_e_toggle()  toggle_e()
  49:lcd.c         **** #define lcd_rw_high()   LCD_RW_PORT |=  _BV(LCD_RW_PIN)
  50:lcd.c         **** #define lcd_rw_low()    LCD_RW_PORT &= ~_BV(LCD_RW_PIN)
  51:lcd.c         **** #define lcd_rs_high()   LCD_RS_PORT |=  _BV(LCD_RS_PIN)
  52:lcd.c         **** #define lcd_rs_low()    LCD_RS_PORT &= ~_BV(LCD_RS_PIN)
  53:lcd.c         **** #define lcd_backlight_high()   LCD_BL_PORT |=  _BV(LCD_BL_PIN)
  54:lcd.c         **** #define lcd_backlight_low()    LCD_BL_PORT &= ~_BV(LCD_BL_PIN)
  55:lcd.c         **** #endif
  56:lcd.c         **** 
  57:lcd.c         **** #if LCD_IO_MODE
  58:lcd.c         **** #if LCD_LINES==1
  59:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_1LINE 
  60:lcd.c         **** #else
  61:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_2LINES 
  62:lcd.c         **** #endif
  63:lcd.c         **** #else
  64:lcd.c         **** #if LCD_LINES==1
  65:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_1LINE
  66:lcd.c         **** #else
  67:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_2LINES
  68:lcd.c         **** #endif
  69:lcd.c         **** #endif
  70:lcd.c         **** 
  71:lcd.c         **** #if LCD_CONTROLLER_KS0073
  72:lcd.c         **** #if LCD_LINES==4
  73:lcd.c         **** 
  74:lcd.c         **** #define KS0073_EXTENDED_FUNCTION_REGISTER_ON  0x24   /* |0|010|0100 4-bit mode extension-bit RE = 1
  75:lcd.c         **** #define KS0073_EXTENDED_FUNCTION_REGISTER_OFF 0x20   /* |0|000|1001 4 lines mode */
  76:lcd.c         **** #define KS0073_4LINES_MODE                    0x09   /* |0|001|0000 4-bit mode, extension-bit RE = 
  77:lcd.c         **** 
  78:lcd.c         **** #endif
  79:lcd.c         **** #endif
  80:lcd.c         **** 
  81:lcd.c         **** /* 
  82:lcd.c         **** ** function prototypes 
  83:lcd.c         **** */
  84:lcd.c         **** #if LCD_IO_MODE
  85:lcd.c         **** static void toggle_e(void);
  86:lcd.c         **** #endif
  87:lcd.c         **** 
  88:lcd.c         **** /*
  89:lcd.c         **** ** local functions
GAS LISTING /tmp/ccGoRhtD.s 			page 4


  90:lcd.c         **** */
  91:lcd.c         **** 
  92:lcd.c         **** 
  93:lcd.c         **** 
  94:lcd.c         **** /*************************************************************************
  95:lcd.c         ****  delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
  96:lcd.c         **** *************************************************************************/
  97:lcd.c         **** static inline void _delayFourCycles(unsigned int __count)
  98:lcd.c         **** {
  99:lcd.c         ****     if ( __count == 0 )    
 100:lcd.c         ****         __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 101:lcd.c         ****     else
 102:lcd.c         ****         __asm__ __volatile__ (
 103:lcd.c         ****     	    "1: sbiw %0,1" "\n\t"                  
 104:lcd.c         ****     	    "brne 1b"                              // 4 cycles/loop
 105:lcd.c         ****     	    : "=w" (__count)
 106:lcd.c         ****     	    : "0" (__count)
 107:lcd.c         ****     	   );
 108:lcd.c         **** }
 109:lcd.c         **** 
 110:lcd.c         **** 
 111:lcd.c         **** /************************************************************************* 
 112:lcd.c         **** delay for a minimum of <us> microseconds
 113:lcd.c         **** the number of loops is calculated at compile-time from MCU clock frequency
 114:lcd.c         **** *************************************************************************/
 115:lcd.c         **** #define delay(us)  _delayFourCycles( ( ( 1*(XTAL/4000) )*us)/1000 )
 116:lcd.c         **** 
 117:lcd.c         **** 
 118:lcd.c         **** #if LCD_IO_MODE
 119:lcd.c         **** /* toggle Enable Pin to initiate write */
 120:lcd.c         **** static void toggle_e(void)
 121:lcd.c         **** {
  83               		.stabn	68,0,121,.LM0-.LFBB1
  84               	.LM0:
  85               	.LFBB1:
  86               	/* prologue: frame size=0 */
  87               	/* prologue end (size=0) */
 122:lcd.c         ****     lcd_e_high();
  88               		.stabn	68,0,122,.LM1-.LFBB1
  89               	.LM1:
  90 0000 D89A      		sbi 59-0x20,0
 123:lcd.c         ****     lcd_e_delay();
  91               		.stabn	68,0,123,.LM2-.LFBB1
  92               	.LM2:
  93               	/* #APP */
  94 0002 00C0      		rjmp 1f
  95               	 1:
 124:lcd.c         ****     lcd_e_low();
  96               		.stabn	68,0,124,.LM3-.LFBB1
  97               	.LM3:
  98               	/* #NOAPP */
  99 0004 D898      		cbi 59-0x20,0
 100               	/* epilogue: frame size=0 */
 101 0006 0895      		ret
 102               	/* epilogue end (size=1) */
 103               	/* function toggle_e size 7 (6) */
 104               		.size	toggle_e, .-toggle_e
GAS LISTING /tmp/ccGoRhtD.s 			page 5


 105               	.Lscope1:
 106               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 107               		.stabd	78,0,0
 108               		.stabs	"lcd_write:f(0,15)",36,0,138,lcd_write
 109               		.stabs	"data:P(2,2)",64,0,137,24
 110               		.stabs	"rs:P(2,2)",64,0,137,22
 111               		.type	lcd_write, @function
 112               	lcd_write:
 113               		.stabd	46,0,0
 125:lcd.c         **** }
 126:lcd.c         **** #endif
 127:lcd.c         **** 
 128:lcd.c         **** 
 129:lcd.c         **** /*************************************************************************
 130:lcd.c         **** Low-level function to write byte to LCD controller
 131:lcd.c         **** Input:    data   byte to write to LCD
 132:lcd.c         ****           rs     1: write data    
 133:lcd.c         ****                  0: write instruction
 134:lcd.c         **** Returns:  none
 135:lcd.c         **** *************************************************************************/
 136:lcd.c         **** #if LCD_IO_MODE
 137:lcd.c         **** static void lcd_write(uint8_t data,uint8_t rs) 
 138:lcd.c         **** {
 114               		.stabn	68,0,138,.LM4-.LFBB2
 115               	.LM4:
 116               	.LFBB2:
 117               	/* prologue: frame size=0 */
 118 0008 CF93      		push r28
 119 000a DF93      		push r29
 120               	/* prologue end (size=2) */
 139:lcd.c         ****     unsigned char dataBits ;
 140:lcd.c         **** 
 141:lcd.c         **** 
 142:lcd.c         ****     if (rs) {   /* write data        (RS=1, RW=0) */
 121               		.stabn	68,0,142,.LM5-.LFBB2
 122               	.LM5:
 123 000c 6623      		tst r22
 124 000e 01F0      		breq .L4
 143:lcd.c         ****        lcd_rs_high();
 125               		.stabn	68,0,143,.LM6-.LFBB2
 126               	.LM6:
 127 0010 D99A      		sbi 59-0x20,1
 128 0012 00C0      		rjmp .L6
 129               	.L4:
 144:lcd.c         ****     } else {    /* write instruction (RS=0, RW=0) */
 145:lcd.c         ****        lcd_rs_low();
 130               		.stabn	68,0,145,.LM7-.LFBB2
 131               	.LM7:
 132 0014 D998      		cbi 59-0x20,1
 133               	.L6:
 146:lcd.c         ****     }
 147:lcd.c         ****     lcd_rw_low();
 134               		.stabn	68,0,147,.LM8-.LFBB2
 135               	.LM8:
 136 0016 DA98      		cbi 59-0x20,2
 148:lcd.c         **** 
 149:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
GAS LISTING /tmp/ccGoRhtD.s 			page 6


 150:lcd.c         ****       && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 
 151:lcd.c         ****     {
 152:lcd.c         ****         /* configure data pins as output */
 153:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x0F;
 154:lcd.c         **** 
 155:lcd.c         ****         /* output high nibble first */
 156:lcd.c         ****         dataBits = LCD_DATA0_PORT & 0xF0;
 157:lcd.c         ****         LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 158:lcd.c         ****         lcd_e_toggle();
 159:lcd.c         **** 
 160:lcd.c         ****         /* output low nibble */
 161:lcd.c         ****         LCD_DATA0_PORT = dataBits | (data&0x0F);
 162:lcd.c         ****         lcd_e_toggle();
 163:lcd.c         **** 
 164:lcd.c         ****         /* all data pins high (inactive) */
 165:lcd.c         ****         LCD_DATA0_PORT = dataBits | 0x0F;
 166:lcd.c         ****     }
 167:lcd.c         ****     else
 168:lcd.c         ****     {
 169:lcd.c         ****         /* configure data pins as output */
 170:lcd.c         ****         DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 137               		.stabn	68,0,170,.LM9-.LFBB2
 138               	.LM9:
 139 0018 D49A      		sbi 58-0x20,4
 171:lcd.c         ****         DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 140               		.stabn	68,0,171,.LM10-.LFBB2
 141               	.LM10:
 142 001a D59A      		sbi 58-0x20,5
 172:lcd.c         ****         DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 143               		.stabn	68,0,172,.LM11-.LFBB2
 144               	.LM11:
 145 001c D69A      		sbi 58-0x20,6
 173:lcd.c         ****         DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 146               		.stabn	68,0,173,.LM12-.LFBB2
 147               	.LM12:
 148 001e D79A      		sbi 58-0x20,7
 174:lcd.c         ****         
 175:lcd.c         ****         /* output high nibble first */
 176:lcd.c         ****         LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 149               		.stabn	68,0,176,.LM13-.LFBB2
 150               	.LM13:
 151 0020 DF98      		cbi 59-0x20,7
 177:lcd.c         ****         LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 152               		.stabn	68,0,177,.LM14-.LFBB2
 153               	.LM14:
 154 0022 DE98      		cbi 59-0x20,6
 178:lcd.c         ****         LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 155               		.stabn	68,0,178,.LM15-.LFBB2
 156               	.LM15:
 157 0024 DD98      		cbi 59-0x20,5
 179:lcd.c         ****         LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 158               		.stabn	68,0,179,.LM16-.LFBB2
 159               	.LM16:
 160 0026 DC98      		cbi 59-0x20,4
 180:lcd.c         ****     	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 161               		.stabn	68,0,180,.LM17-.LFBB2
 162               	.LM17:
GAS LISTING /tmp/ccGoRhtD.s 			page 7


 163 0028 87FD      		sbrc r24,7
 164 002a DF9A      		sbi 59-0x20,7
 165               	.L7:
 181:lcd.c         ****     	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 166               		.stabn	68,0,181,.LM18-.LFBB2
 167               	.LM18:
 168 002c C82F      		mov r28,r24
 169 002e DD27      		clr r29
 170 0030 C6FD      		sbrc r28,6
 171 0032 DE9A      		sbi 59-0x20,6
 172               	.L9:
 182:lcd.c         ****     	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 173               		.stabn	68,0,182,.LM19-.LFBB2
 174               	.LM19:
 175 0034 C5FD      		sbrc r28,5
 176 0036 DD9A      		sbi 59-0x20,5
 177               	.L11:
 183:lcd.c         ****     	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 178               		.stabn	68,0,183,.LM20-.LFBB2
 179               	.LM20:
 180 0038 C4FD      		sbrc r28,4
 181 003a DC9A      		sbi 59-0x20,4
 182               	.L13:
 184:lcd.c         ****         lcd_e_toggle();
 183               		.stabn	68,0,184,.LM21-.LFBB2
 184               	.LM21:
 185 003c 0E94 0000 		call toggle_e
 185:lcd.c         ****         
 186:lcd.c         ****         /* output low nibble */
 187:lcd.c         ****         LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 186               		.stabn	68,0,187,.LM22-.LFBB2
 187               	.LM22:
 188 0040 DF98      		cbi 59-0x20,7
 188:lcd.c         ****         LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 189               		.stabn	68,0,188,.LM23-.LFBB2
 190               	.LM23:
 191 0042 DE98      		cbi 59-0x20,6
 189:lcd.c         ****         LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 192               		.stabn	68,0,189,.LM24-.LFBB2
 193               	.LM24:
 194 0044 DD98      		cbi 59-0x20,5
 190:lcd.c         ****         LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 195               		.stabn	68,0,190,.LM25-.LFBB2
 196               	.LM25:
 197 0046 DC98      		cbi 59-0x20,4
 191:lcd.c         ****     	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 198               		.stabn	68,0,191,.LM26-.LFBB2
 199               	.LM26:
 200 0048 C3FD      		sbrc r28,3
 201 004a DF9A      		sbi 59-0x20,7
 202               	.L15:
 192:lcd.c         ****     	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 203               		.stabn	68,0,192,.LM27-.LFBB2
 204               	.LM27:
 205 004c C2FD      		sbrc r28,2
 206 004e DE9A      		sbi 59-0x20,6
 207               	.L17:
GAS LISTING /tmp/ccGoRhtD.s 			page 8


 193:lcd.c         ****     	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 208               		.stabn	68,0,193,.LM28-.LFBB2
 209               	.LM28:
 210 0050 C1FD      		sbrc r28,1
 211 0052 DD9A      		sbi 59-0x20,5
 212               	.L19:
 194:lcd.c         ****     	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 213               		.stabn	68,0,194,.LM29-.LFBB2
 214               	.LM29:
 215 0054 C0FD      		sbrc r28,0
 216 0056 DC9A      		sbi 59-0x20,4
 217               	.L21:
 195:lcd.c         ****         lcd_e_toggle();        
 218               		.stabn	68,0,195,.LM30-.LFBB2
 219               	.LM30:
 220 0058 0E94 0000 		call toggle_e
 196:lcd.c         ****         
 197:lcd.c         ****         /* all data pins high (inactive) */
 198:lcd.c         ****         LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 221               		.stabn	68,0,198,.LM31-.LFBB2
 222               	.LM31:
 223 005c DC9A      		sbi 59-0x20,4
 199:lcd.c         ****         LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 224               		.stabn	68,0,199,.LM32-.LFBB2
 225               	.LM32:
 226 005e DD9A      		sbi 59-0x20,5
 200:lcd.c         ****         LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 227               		.stabn	68,0,200,.LM33-.LFBB2
 228               	.LM33:
 229 0060 DE9A      		sbi 59-0x20,6
 201:lcd.c         ****         LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 230               		.stabn	68,0,201,.LM34-.LFBB2
 231               	.LM34:
 232 0062 DF9A      		sbi 59-0x20,7
 233               	/* epilogue: frame size=0 */
 234 0064 DF91      		pop r29
 235 0066 CF91      		pop r28
 236 0068 0895      		ret
 237               	/* epilogue end (size=3) */
 238               	/* function lcd_write size 57 (52) */
 239               		.size	lcd_write, .-lcd_write
 240               	.Lscope2:
 241               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 242               		.stabd	78,0,0
 243               		.stabs	"lcd_read:f(2,2)",36,0,219,lcd_read
 244               		.stabs	"rs:P(2,2)",64,0,218,24
 245               		.type	lcd_read, @function
 246               	lcd_read:
 247               		.stabd	46,0,0
 202:lcd.c         ****     }
 203:lcd.c         **** }
 204:lcd.c         **** #else
 205:lcd.c         **** #define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LC
 206:lcd.c         **** /* rs==0 -> write instruction to LCD_IO_FUNCTION */
 207:lcd.c         **** /* rs==1 -> write data to LCD_IO_DATA */
 208:lcd.c         **** #endif
 209:lcd.c         **** 
GAS LISTING /tmp/ccGoRhtD.s 			page 9


 210:lcd.c         **** 
 211:lcd.c         **** /*************************************************************************
 212:lcd.c         **** Low-level function to read byte from LCD controller
 213:lcd.c         **** Input:    rs     1: read data    
 214:lcd.c         ****                  0: read busy flag / address counter
 215:lcd.c         **** Returns:  byte read from LCD controller
 216:lcd.c         **** *************************************************************************/
 217:lcd.c         **** #if LCD_IO_MODE
 218:lcd.c         **** static uint8_t lcd_read(uint8_t rs) 
 219:lcd.c         **** {
 248               		.stabn	68,0,219,.LM35-.LFBB3
 249               	.LM35:
 250               	.LFBB3:
 251               	/* prologue: frame size=0 */
 252               	/* prologue end (size=0) */
 220:lcd.c         ****     uint8_t data;
 221:lcd.c         ****     
 222:lcd.c         ****     
 223:lcd.c         ****     if (rs)
 253               		.stabn	68,0,223,.LM36-.LFBB3
 254               	.LM36:
 255 006a 8823      		tst r24
 256 006c 01F0      		breq .L25
 224:lcd.c         ****         lcd_rs_high();                       /* RS=1: read data      */
 257               		.stabn	68,0,224,.LM37-.LFBB3
 258               	.LM37:
 259 006e D99A      		sbi 59-0x20,1
 260 0070 00C0      		rjmp .L27
 261               	.L25:
 225:lcd.c         ****     else
 226:lcd.c         ****         lcd_rs_low();                        /* RS=0: read busy flag */
 262               		.stabn	68,0,226,.LM38-.LFBB3
 263               	.LM38:
 264 0072 D998      		cbi 59-0x20,1
 265               	.L27:
 227:lcd.c         ****     lcd_rw_high();                           /* RW=1  read mode      */
 266               		.stabn	68,0,227,.LM39-.LFBB3
 267               	.LM39:
 268 0074 DA9A      		sbi 59-0x20,2
 228:lcd.c         ****     
 229:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 230:lcd.c         ****       && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN ==
 231:lcd.c         ****     {
 232:lcd.c         ****         DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 233:lcd.c         ****         
 234:lcd.c         ****         lcd_e_high();
 235:lcd.c         ****         lcd_e_delay();        
 236:lcd.c         ****         data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 237:lcd.c         ****         lcd_e_low();
 238:lcd.c         ****         
 239:lcd.c         ****         lcd_e_delay();                       /* Enable 500ns low       */
 240:lcd.c         ****         
 241:lcd.c         ****         lcd_e_high();
 242:lcd.c         ****         lcd_e_delay();
 243:lcd.c         ****         data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 244:lcd.c         ****         lcd_e_low();
 245:lcd.c         ****     }
GAS LISTING /tmp/ccGoRhtD.s 			page 10


 246:lcd.c         ****     else
 247:lcd.c         ****     {
 248:lcd.c         ****         /* configure data pins as input */
 249:lcd.c         ****         DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 269               		.stabn	68,0,249,.LM40-.LFBB3
 270               	.LM40:
 271 0076 D498      		cbi 58-0x20,4
 250:lcd.c         ****         DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 272               		.stabn	68,0,250,.LM41-.LFBB3
 273               	.LM41:
 274 0078 D598      		cbi 58-0x20,5
 251:lcd.c         ****         DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 275               		.stabn	68,0,251,.LM42-.LFBB3
 276               	.LM42:
 277 007a D698      		cbi 58-0x20,6
 252:lcd.c         ****         DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 278               		.stabn	68,0,252,.LM43-.LFBB3
 279               	.LM43:
 280 007c D798      		cbi 58-0x20,7
 253:lcd.c         ****                 
 254:lcd.c         ****         /* read high nibble first */
 255:lcd.c         ****         lcd_e_high();
 281               		.stabn	68,0,255,.LM44-.LFBB3
 282               	.LM44:
 283 007e D89A      		sbi 59-0x20,0
 256:lcd.c         ****         lcd_e_delay();        
 284               		.stabn	68,0,256,.LM45-.LFBB3
 285               	.LM45:
 286               	/* #APP */
 287 0080 00C0      		rjmp 1f
 288               	 1:
 257:lcd.c         ****         data = 0;
 258:lcd.c         ****         if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 289               		.stabn	68,0,258,.LM46-.LFBB3
 290               	.LM46:
 291               	/* #NOAPP */
 292 0082 CC9B      		sbis 57-0x20,4
 293 0084 00C0      		rjmp .L28
 294 0086 80E1      		ldi r24,lo8(16)
 295 0088 00C0      		rjmp .L30
 296               	.L28:
 297 008a 80E0      		ldi r24,lo8(0)
 298               	.L30:
 259:lcd.c         ****         if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 299               		.stabn	68,0,259,.LM47-.LFBB3
 300               	.LM47:
 301 008c CD99      		sbic 57-0x20,5
 302 008e 8062      		ori r24,lo8(32)
 303               	.L31:
 260:lcd.c         ****         if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 304               		.stabn	68,0,260,.LM48-.LFBB3
 305               	.LM48:
 306 0090 CE99      		sbic 57-0x20,6
 307 0092 8064      		ori r24,lo8(64)
 308               	.L33:
 261:lcd.c         ****         if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 309               		.stabn	68,0,261,.LM49-.LFBB3
GAS LISTING /tmp/ccGoRhtD.s 			page 11


 310               	.LM49:
 311 0094 CF99      		sbic 57-0x20,7
 312 0096 8068      		ori r24,lo8(-128)
 313               	.L35:
 262:lcd.c         ****         lcd_e_low();
 314               		.stabn	68,0,262,.LM50-.LFBB3
 315               	.LM50:
 316 0098 D898      		cbi 59-0x20,0
 263:lcd.c         **** 
 264:lcd.c         ****         lcd_e_delay();                       /* Enable 500ns low       */
 317               		.stabn	68,0,264,.LM51-.LFBB3
 318               	.LM51:
 319               	/* #APP */
 320 009a 00C0      		rjmp 1f
 321               	 1:
 265:lcd.c         ****     
 266:lcd.c         ****         /* read low nibble */    
 267:lcd.c         ****         lcd_e_high();
 322               		.stabn	68,0,267,.LM52-.LFBB3
 323               	.LM52:
 324               	/* #NOAPP */
 325 009c D89A      		sbi 59-0x20,0
 268:lcd.c         ****         lcd_e_delay();
 326               		.stabn	68,0,268,.LM53-.LFBB3
 327               	.LM53:
 328               	/* #APP */
 329 009e 00C0      		rjmp 1f
 330               	 1:
 269:lcd.c         ****         if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 331               		.stabn	68,0,269,.LM54-.LFBB3
 332               	.LM54:
 333               	/* #NOAPP */
 334 00a0 CC99      		sbic 57-0x20,4
 335 00a2 8160      		ori r24,lo8(1)
 336               	.L37:
 270:lcd.c         ****         if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 337               		.stabn	68,0,270,.LM55-.LFBB3
 338               	.LM55:
 339 00a4 CD99      		sbic 57-0x20,5
 340 00a6 8260      		ori r24,lo8(2)
 341               	.L39:
 271:lcd.c         ****         if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 342               		.stabn	68,0,271,.LM56-.LFBB3
 343               	.LM56:
 344 00a8 CE99      		sbic 57-0x20,6
 345 00aa 8460      		ori r24,lo8(4)
 346               	.L41:
 272:lcd.c         ****         if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 347               		.stabn	68,0,272,.LM57-.LFBB3
 348               	.LM57:
 349 00ac CF99      		sbic 57-0x20,7
 350 00ae 8860      		ori r24,lo8(8)
 351               	.L43:
 273:lcd.c         ****         lcd_e_low();
 352               		.stabn	68,0,273,.LM58-.LFBB3
 353               	.LM58:
 354 00b0 D898      		cbi 59-0x20,0
GAS LISTING /tmp/ccGoRhtD.s 			page 12


 274:lcd.c         ****     }
 275:lcd.c         ****     return data;
 276:lcd.c         **** }
 355               		.stabn	68,0,276,.LM59-.LFBB3
 356               	.LM59:
 357 00b2 9927      		clr r25
 358               	/* epilogue: frame size=0 */
 359 00b4 0895      		ret
 360               	/* epilogue end (size=1) */
 361               	/* function lcd_read size 54 (53) */
 362               		.size	lcd_read, .-lcd_read
 363               		.stabs	"data:r(2,2)",64,0,220,24
 364               		.stabn	192,0,0,.LFBB3-.LFBB3
 365               		.stabn	224,0,0,.Lscope3-.LFBB3
 366               	.Lscope3:
 367               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 368               		.stabd	78,0,0
 369               		.stabs	"lcd_waitbusy:f(2,2)",36,0,289,lcd_waitbusy
 370               		.type	lcd_waitbusy, @function
 371               	lcd_waitbusy:
 372               		.stabd	46,0,0
 277:lcd.c         **** #else
 278:lcd.c         **** #define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LC
 279:lcd.c         **** /* rs==0 -> read instruction from LCD_IO_FUNCTION */
 280:lcd.c         **** /* rs==1 -> read data from LCD_IO_DATA */
 281:lcd.c         **** #endif
 282:lcd.c         **** 
 283:lcd.c         **** 
 284:lcd.c         **** /*************************************************************************
 285:lcd.c         **** loops while lcd is busy, returns address counter
 286:lcd.c         **** *************************************************************************/
 287:lcd.c         **** static uint8_t lcd_waitbusy(void)
 288:lcd.c         **** 
 289:lcd.c         **** {
 373               		.stabn	68,0,289,.LM60-.LFBB4
 374               	.LM60:
 375               	.LFBB4:
 376               	/* prologue: frame size=0 */
 377               	/* prologue end (size=0) */
 378               	.L48:
 290:lcd.c         ****     register uint8_t c;
 291:lcd.c         ****     
 292:lcd.c         ****     /* wait until busy flag is cleared */
 293:lcd.c         ****     while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 379               		.stabn	68,0,293,.LM61-.LFBB4
 380               	.LM61:
 381 00b6 80E0      		ldi r24,lo8(0)
 382 00b8 0E94 0000 		call lcd_read
 383 00bc 87FD      		sbrc r24,7
 384 00be 00C0      		rjmp .L48
 385               	.LBB4:
 386               	.LBB5:
 387               		.stabn	68,0,102,.LM62-.LFBB4
 388               	.LM62:
 389 00c0 82E0      		ldi r24,lo8(2)
 390 00c2 90E0      		ldi r25,hi8(2)
 391               	/* #APP */
GAS LISTING /tmp/ccGoRhtD.s 			page 13


 392 00c4 0197      		1: sbiw r24,1
 393 00c6 01F4      		brne 1b
 394               	/* #NOAPP */
 395               	.LBE5:
 396               	.LBE4:
 294:lcd.c         ****     
 295:lcd.c         ****     /* the address counter is updated 4us after the busy flag is cleared */
 296:lcd.c         ****     delay(2);
 297:lcd.c         **** 
 298:lcd.c         ****     /* now read the address counter */
 299:lcd.c         ****     return (lcd_read(0));  // return address counter
 397               		.stabn	68,0,299,.LM63-.LFBB4
 398               	.LM63:
 399 00c8 80E0      		ldi r24,lo8(0)
 400 00ca 0E94 0000 		call lcd_read
 300:lcd.c         ****     
 301:lcd.c         **** }/* lcd_waitbusy */
 401               		.stabn	68,0,301,.LM64-.LFBB4
 402               	.LM64:
 403 00ce 9927      		clr r25
 404               	/* epilogue: frame size=0 */
 405 00d0 0895      		ret
 406               	/* epilogue end (size=1) */
 407               	/* function lcd_waitbusy size 16 (15) */
 408               		.size	lcd_waitbusy, .-lcd_waitbusy
 409               		.stabs	"__count:r(0,4)",64,0,296,24
 410               		.stabn	192,0,0,.LBB4-.LFBB4
 411               		.stabn	224,0,0,.LBE4-.LFBB4
 412               	.Lscope4:
 413               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 414               		.stabd	78,0,0
 415               		.stabs	"lcd_backlight:F(0,15)",36,0,361,lcd_backlight
 416               		.stabs	"cmd:P(2,2)",64,0,360,24
 417               	.global	lcd_backlight
 418               		.type	lcd_backlight, @function
 419               	lcd_backlight:
 420               		.stabd	46,0,0
 302:lcd.c         **** 
 303:lcd.c         **** 
 304:lcd.c         **** /*************************************************************************
 305:lcd.c         **** Move cursor to the start of next line or to the first line if the cursor 
 306:lcd.c         **** is already on the last line.
 307:lcd.c         **** *************************************************************************/
 308:lcd.c         **** static inline void lcd_newline(uint8_t pos)
 309:lcd.c         **** {
 310:lcd.c         ****     register uint8_t addressCounter;
 311:lcd.c         **** 
 312:lcd.c         **** 
 313:lcd.c         **** #if LCD_LINES==1
 314:lcd.c         ****     addressCounter = 0;
 315:lcd.c         **** #endif
 316:lcd.c         **** #if LCD_LINES==2
 317:lcd.c         ****     if ( pos < (LCD_START_LINE2) )
 318:lcd.c         ****         addressCounter = LCD_START_LINE2;
 319:lcd.c         ****     else
 320:lcd.c         ****         addressCounter = LCD_START_LINE1;
 321:lcd.c         **** #endif
GAS LISTING /tmp/ccGoRhtD.s 			page 14


 322:lcd.c         **** #if LCD_LINES==4
 323:lcd.c         **** #if KS0073_4LINES_MODE
 324:lcd.c         ****     if ( pos < LCD_START_LINE2 )
 325:lcd.c         ****         addressCounter = LCD_START_LINE2;
 326:lcd.c         ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
 327:lcd.c         ****         addressCounter = LCD_START_LINE3;
 328:lcd.c         ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
 329:lcd.c         ****         addressCounter = LCD_START_LINE4;
 330:lcd.c         ****     else 
 331:lcd.c         ****         addressCounter = LCD_START_LINE1;
 332:lcd.c         **** #else
 333:lcd.c         ****     if ( pos < LCD_START_LINE3 )
 334:lcd.c         ****         addressCounter = LCD_START_LINE2;
 335:lcd.c         ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 336:lcd.c         ****         addressCounter = LCD_START_LINE3;
 337:lcd.c         ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 338:lcd.c         ****         addressCounter = LCD_START_LINE4;
 339:lcd.c         ****     else 
 340:lcd.c         ****         addressCounter = LCD_START_LINE1;
 341:lcd.c         **** #endif
 342:lcd.c         **** #endif
 343:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+addressCounter);
 344:lcd.c         **** 
 345:lcd.c         **** }/* lcd_newline */
 346:lcd.c         **** 
 347:lcd.c         **** 
 348:lcd.c         **** /*
 349:lcd.c         **** ** PUBLIC FUNCTIONS 
 350:lcd.c         **** */
 351:lcd.c         **** 
 352:lcd.c         **** 
 353:lcd.c         **** 
 354:lcd.c         **** /*************************************************************************
 355:lcd.c         **** Send LCD controller instruction command
 356:lcd.c         **** Input:   instruction to send to LCD controller, see HD44780 data sheet
 357:lcd.c         **** Returns: none
 358:lcd.c         **** *************************************************************************/
 359:lcd.c         **** 
 360:lcd.c         **** void lcd_backlight(uint8_t cmd)
 361:lcd.c         **** {
 421               		.stabn	68,0,361,.LM65-.LFBB5
 422               	.LM65:
 423               	.LFBB5:
 424               	/* prologue: frame size=0 */
 425               	/* prologue end (size=0) */
 362:lcd.c         ****  if (cmd==LCD_BL_ON) {
 426               		.stabn	68,0,362,.LM66-.LFBB5
 427               	.LM66:
 428 00d2 8130      		cpi r24,lo8(1)
 429 00d4 01F4      		brne .L54
 363:lcd.c         ****    lcd_backlight_high();
 430               		.stabn	68,0,363,.LM67-.LFBB5
 431               	.LM67:
 432 00d6 DB9A      		sbi 59-0x20,3
 433 00d8 0895      		ret
 434               	.L54:
 364:lcd.c         ****   } else {
GAS LISTING /tmp/ccGoRhtD.s 			page 15


 365:lcd.c         ****    lcd_backlight_low();
 435               		.stabn	68,0,365,.LM68-.LFBB5
 436               	.LM68:
 437 00da DB98      		cbi 59-0x20,3
 438 00dc 0895      		ret
 439               	/* epilogue: frame size=0 */
 440               	/* epilogue: noreturn */
 441               	/* epilogue end (size=0) */
 442               	/* function lcd_backlight size 6 (6) */
 443               		.size	lcd_backlight, .-lcd_backlight
 444               	.Lscope5:
 445               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 446               		.stabd	78,0,0
 447               		.stabs	"lcd_command:F(0,15)",36,0,377,lcd_command
 448               		.stabs	"cmd:P(2,2)",64,0,376,17
 449               	.global	lcd_command
 450               		.type	lcd_command, @function
 451               	lcd_command:
 452               		.stabd	46,0,0
 366:lcd.c         ****  }
 367:lcd.c         **** }
 368:lcd.c         **** 
 369:lcd.c         **** 
 370:lcd.c         **** 
 371:lcd.c         **** /*************************************************************************
 372:lcd.c         **** Send LCD controller instruction command
 373:lcd.c         **** Input:   instruction to send to LCD controller, see HD44780 data sheet
 374:lcd.c         **** Returns: none
 375:lcd.c         **** *************************************************************************/
 376:lcd.c         **** void lcd_command(uint8_t cmd)
 377:lcd.c         **** {
 453               		.stabn	68,0,377,.LM69-.LFBB6
 454               	.LM69:
 455               	.LFBB6:
 456               	/* prologue: frame size=0 */
 457 00de 1F93      		push r17
 458               	/* prologue end (size=1) */
 459 00e0 182F      		mov r17,r24
 378:lcd.c         ****     lcd_waitbusy();
 460               		.stabn	68,0,378,.LM70-.LFBB6
 461               	.LM70:
 462 00e2 0E94 0000 		call lcd_waitbusy
 379:lcd.c         ****     lcd_write(cmd,0);
 463               		.stabn	68,0,379,.LM71-.LFBB6
 464               	.LM71:
 465 00e6 60E0      		ldi r22,lo8(0)
 466 00e8 812F      		mov r24,r17
 467 00ea 0E94 0000 		call lcd_write
 468               	/* epilogue: frame size=0 */
 469 00ee 1F91      		pop r17
 470 00f0 0895      		ret
 471               	/* epilogue end (size=2) */
 472               	/* function lcd_command size 10 (7) */
 473               		.size	lcd_command, .-lcd_command
 474               	.Lscope6:
 475               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 476               		.stabd	78,0,0
GAS LISTING /tmp/ccGoRhtD.s 			page 16


 477               		.stabs	"lcd_data:F(0,15)",36,0,389,lcd_data
 478               		.stabs	"data:P(2,2)",64,0,388,17
 479               	.global	lcd_data
 480               		.type	lcd_data, @function
 481               	lcd_data:
 482               		.stabd	46,0,0
 380:lcd.c         **** }
 381:lcd.c         **** 
 382:lcd.c         **** 
 383:lcd.c         **** /*************************************************************************
 384:lcd.c         **** Send data byte to LCD controller 
 385:lcd.c         **** Input:   data to send to LCD controller, see HD44780 data sheet
 386:lcd.c         **** Returns: none
 387:lcd.c         **** *************************************************************************/
 388:lcd.c         **** void lcd_data(uint8_t data)
 389:lcd.c         **** {
 483               		.stabn	68,0,389,.LM72-.LFBB7
 484               	.LM72:
 485               	.LFBB7:
 486               	/* prologue: frame size=0 */
 487 00f2 1F93      		push r17
 488               	/* prologue end (size=1) */
 489 00f4 182F      		mov r17,r24
 390:lcd.c         ****     lcd_waitbusy();
 490               		.stabn	68,0,390,.LM73-.LFBB7
 491               	.LM73:
 492 00f6 0E94 0000 		call lcd_waitbusy
 391:lcd.c         ****     lcd_write(data,1);
 493               		.stabn	68,0,391,.LM74-.LFBB7
 494               	.LM74:
 495 00fa 61E0      		ldi r22,lo8(1)
 496 00fc 812F      		mov r24,r17
 497 00fe 0E94 0000 		call lcd_write
 498               	/* epilogue: frame size=0 */
 499 0102 1F91      		pop r17
 500 0104 0895      		ret
 501               	/* epilogue end (size=2) */
 502               	/* function lcd_data size 10 (7) */
 503               		.size	lcd_data, .-lcd_data
 504               	.Lscope7:
 505               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 506               		.stabd	78,0,0
 507               		.stabs	"lcd_gotoxy:F(0,15)",36,0,403,lcd_gotoxy
 508               		.stabs	"x:P(2,2)",64,0,402,24
 509               		.stabs	"y:P(2,2)",64,0,402,22
 510               	.global	lcd_gotoxy
 511               		.type	lcd_gotoxy, @function
 512               	lcd_gotoxy:
 513               		.stabd	46,0,0
 392:lcd.c         **** }
 393:lcd.c         **** 
 394:lcd.c         **** 
 395:lcd.c         **** 
 396:lcd.c         **** /*************************************************************************
 397:lcd.c         **** Set cursor to specified position
 398:lcd.c         **** Input:    x  horizontal position  (0: left most position)
 399:lcd.c         ****           y  vertical position    (0: first line)
GAS LISTING /tmp/ccGoRhtD.s 			page 17


 400:lcd.c         **** Returns:  none
 401:lcd.c         **** *************************************************************************/
 402:lcd.c         **** void lcd_gotoxy(uint8_t x, uint8_t y)
 403:lcd.c         **** {
 514               		.stabn	68,0,403,.LM75-.LFBB8
 515               	.LM75:
 516               	.LFBB8:
 517               	/* prologue: frame size=0 */
 518               	/* prologue end (size=0) */
 404:lcd.c         **** #if LCD_LINES==1
 405:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 406:lcd.c         **** #endif
 407:lcd.c         **** #if LCD_LINES==2
 408:lcd.c         ****     if ( y==0 ) 
 519               		.stabn	68,0,408,.LM76-.LFBB8
 520               	.LM76:
 521 0106 6623      		tst r22
 522 0108 01F4      		brne .L63
 409:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 523               		.stabn	68,0,409,.LM77-.LFBB8
 524               	.LM77:
 525 010a 8058      		subi r24,lo8(-(-128))
 526 010c 00C0      		rjmp .L67
 527               	.L63:
 410:lcd.c         ****     else
 411:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 528               		.stabn	68,0,411,.LM78-.LFBB8
 529               	.LM78:
 530 010e 8054      		subi r24,lo8(-(-64))
 531               	.L67:
 532 0110 0E94 0000 		call lcd_command
 533 0114 0895      		ret
 534               	/* epilogue: frame size=0 */
 535               	/* epilogue: noreturn */
 536               	/* epilogue end (size=0) */
 537               	/* function lcd_gotoxy size 8 (8) */
 538               		.size	lcd_gotoxy, .-lcd_gotoxy
 539               	.Lscope8:
 540               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 541               		.stabd	78,0,0
 542               		.stabs	"lcd_getxy:F(0,1)",36,0,430,lcd_getxy
 543               	.global	lcd_getxy
 544               		.type	lcd_getxy, @function
 545               	lcd_getxy:
 546               		.stabd	46,0,0
 412:lcd.c         **** #endif
 413:lcd.c         **** #if LCD_LINES==4
 414:lcd.c         ****     if ( y==0 )
 415:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 416:lcd.c         ****     else if ( y==1)
 417:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 418:lcd.c         ****     else if ( y==2)
 419:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 420:lcd.c         ****     else /* y==3 */
 421:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 422:lcd.c         **** #endif
 423:lcd.c         **** 
GAS LISTING /tmp/ccGoRhtD.s 			page 18


 424:lcd.c         **** }/* lcd_gotoxy */
 425:lcd.c         **** 
 426:lcd.c         **** 
 427:lcd.c         **** /*************************************************************************
 428:lcd.c         **** *************************************************************************/
 429:lcd.c         **** int lcd_getxy(void)
 430:lcd.c         **** {
 547               		.stabn	68,0,430,.LM79-.LFBB9
 548               	.LM79:
 549               	.LFBB9:
 550               	/* prologue: frame size=0 */
 551               	/* prologue end (size=0) */
 431:lcd.c         ****     return lcd_waitbusy();
 552               		.stabn	68,0,431,.LM80-.LFBB9
 553               	.LM80:
 554 0116 0E94 0000 		call lcd_waitbusy
 432:lcd.c         **** }
 555               		.stabn	68,0,432,.LM81-.LFBB9
 556               	.LM81:
 557 011a 9927      		clr r25
 558               	/* epilogue: frame size=0 */
 559 011c 0895      		ret
 560               	/* epilogue end (size=1) */
 561               	/* function lcd_getxy size 4 (3) */
 562               		.size	lcd_getxy, .-lcd_getxy
 563               	.Lscope9:
 564               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 565               		.stabd	78,0,0
 566               		.stabs	"lcd_clrscr:F(0,15)",36,0,439,lcd_clrscr
 567               	.global	lcd_clrscr
 568               		.type	lcd_clrscr, @function
 569               	lcd_clrscr:
 570               		.stabd	46,0,0
 433:lcd.c         **** 
 434:lcd.c         **** 
 435:lcd.c         **** /*************************************************************************
 436:lcd.c         **** Clear display and set cursor to home position
 437:lcd.c         **** *************************************************************************/
 438:lcd.c         **** void lcd_clrscr(void)
 439:lcd.c         **** {
 571               		.stabn	68,0,439,.LM82-.LFBB10
 572               	.LM82:
 573               	.LFBB10:
 574               	/* prologue: frame size=0 */
 575               	/* prologue end (size=0) */
 440:lcd.c         ****     lcd_command(1<<LCD_CLR);
 576               		.stabn	68,0,440,.LM83-.LFBB10
 577               	.LM83:
 578 011e 81E0      		ldi r24,lo8(1)
 579 0120 0E94 0000 		call lcd_command
 580               	/* epilogue: frame size=0 */
 581 0124 0895      		ret
 582               	/* epilogue end (size=1) */
 583               	/* function lcd_clrscr size 4 (3) */
 584               		.size	lcd_clrscr, .-lcd_clrscr
 585               	.Lscope10:
 586               		.stabs	"",36,0,0,.Lscope10-.LFBB10
GAS LISTING /tmp/ccGoRhtD.s 			page 19


 587               		.stabd	78,0,0
 588               		.stabs	"lcd_home:F(0,15)",36,0,448,lcd_home
 589               	.global	lcd_home
 590               		.type	lcd_home, @function
 591               	lcd_home:
 592               		.stabd	46,0,0
 441:lcd.c         **** }
 442:lcd.c         **** 
 443:lcd.c         **** 
 444:lcd.c         **** /*************************************************************************
 445:lcd.c         **** Set cursor to home position
 446:lcd.c         **** *************************************************************************/
 447:lcd.c         **** void lcd_home(void)
 448:lcd.c         **** {
 593               		.stabn	68,0,448,.LM84-.LFBB11
 594               	.LM84:
 595               	.LFBB11:
 596               	/* prologue: frame size=0 */
 597               	/* prologue end (size=0) */
 449:lcd.c         ****     lcd_command(1<<LCD_HOME);
 598               		.stabn	68,0,449,.LM85-.LFBB11
 599               	.LM85:
 600 0126 82E0      		ldi r24,lo8(2)
 601 0128 0E94 0000 		call lcd_command
 602               	/* epilogue: frame size=0 */
 603 012c 0895      		ret
 604               	/* epilogue end (size=1) */
 605               	/* function lcd_home size 4 (3) */
 606               		.size	lcd_home, .-lcd_home
 607               	.Lscope11:
 608               		.stabs	"",36,0,0,.Lscope11-.LFBB11
 609               		.stabd	78,0,0
 610               		.stabs	"lcd_putc:F(0,15)",36,0,459,lcd_putc
 611               		.stabs	"c:P(0,2)",64,0,458,17
 612               	.global	lcd_putc
 613               		.type	lcd_putc, @function
 614               	lcd_putc:
 615               		.stabd	46,0,0
 450:lcd.c         **** }
 451:lcd.c         **** 
 452:lcd.c         **** 
 453:lcd.c         **** /*************************************************************************
 454:lcd.c         **** Display character at current cursor position 
 455:lcd.c         **** Input:    character to be displayed                                       
 456:lcd.c         **** Returns:  none
 457:lcd.c         **** *************************************************************************/
 458:lcd.c         **** void lcd_putc(char c)
 459:lcd.c         **** {
 616               		.stabn	68,0,459,.LM86-.LFBB12
 617               	.LM86:
 618               	.LFBB12:
 619               	/* prologue: frame size=0 */
 620 012e 1F93      		push r17
 621               	/* prologue end (size=1) */
 622 0130 182F      		mov r17,r24
 460:lcd.c         ****     uint8_t pos;
 461:lcd.c         **** 
GAS LISTING /tmp/ccGoRhtD.s 			page 20


 462:lcd.c         **** 
 463:lcd.c         ****     pos = lcd_waitbusy();   // read busy-flag and address counter
 623               		.stabn	68,0,463,.LM87-.LFBB12
 624               	.LM87:
 625 0132 0E94 0000 		call lcd_waitbusy
 464:lcd.c         ****     if (c=='\n')
 626               		.stabn	68,0,464,.LM88-.LFBB12
 627               	.LM88:
 628 0136 1A30      		cpi r17,lo8(10)
 629 0138 01F4      		brne .L75
 630               	.LBB8:
 631               	.LBB9:
 632               		.stabn	68,0,317,.LM89-.LFBB12
 633               	.LM89:
 634 013a 8034      		cpi r24,lo8(64)
 635 013c 00F4      		brsh .L77
 636 013e 80E4      		ldi r24,lo8(64)
 637 0140 00C0      		rjmp .L79
 638               	.L77:
 639 0142 80E0      		ldi r24,lo8(0)
 640               	.L79:
 641               		.stabn	68,0,343,.LM90-.LFBB12
 642               	.LM90:
 643 0144 8058      		subi r24,lo8(-(-128))
 644 0146 0E94 0000 		call lcd_command
 645 014a 00C0      		rjmp .L81
 646               	.L75:
 647               	.LBE9:
 648               	.LBE8:
 465:lcd.c         ****     {
 466:lcd.c         ****         lcd_newline(pos);
 467:lcd.c         ****     }
 468:lcd.c         ****     else
 469:lcd.c         ****     {
 470:lcd.c         **** #if LCD_WRAP_LINES==1
 471:lcd.c         **** #if LCD_LINES==1
 472:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 473:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 474:lcd.c         ****         }
 475:lcd.c         **** #elif LCD_LINES==2
 476:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 477:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 478:lcd.c         ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
 479:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 480:lcd.c         ****         }
 481:lcd.c         **** #elif LCD_LINES==4
 482:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 483:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 484:lcd.c         ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
 485:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
 486:lcd.c         ****         }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
 487:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
 488:lcd.c         ****         }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
 489:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 490:lcd.c         ****         }
 491:lcd.c         **** #endif
 492:lcd.c         ****         lcd_waitbusy();
GAS LISTING /tmp/ccGoRhtD.s 			page 21


 493:lcd.c         **** #endif
 494:lcd.c         ****         lcd_write(c, 1);
 649               		.stabn	68,0,494,.LM91-.LFBB12
 650               	.LM91:
 651 014c 61E0      		ldi r22,lo8(1)
 652 014e 812F      		mov r24,r17
 653 0150 0E94 0000 		call lcd_write
 654               	.L81:
 655               	/* epilogue: frame size=0 */
 656 0154 1F91      		pop r17
 657 0156 0895      		ret
 658               	/* epilogue end (size=2) */
 659               	/* function lcd_putc size 21 (18) */
 660               		.size	lcd_putc, .-lcd_putc
 661               		.stabs	"pos:r(2,2)",64,0,460,24
 662               		.stabn	192,0,0,.LFBB12-.LFBB12
 663               		.stabs	"addressCounter:r(2,2)",64,0,310,24
 664               		.stabn	192,0,0,.LBB9-.LFBB12
 665               		.stabn	224,0,0,.LBE9-.LFBB12
 666               		.stabn	224,0,0,.Lscope12-.LFBB12
 667               	.Lscope12:
 668               		.stabs	"",36,0,0,.Lscope12-.LFBB12
 669               		.stabd	78,0,0
 670               		.stabs	"lcd_puts:F(0,15)",36,0,507,lcd_puts
 671               		.stabs	"s:P(0,16)=*(0,17)=k(0,2)",64,0,505,28
 672               	.global	lcd_puts
 673               		.type	lcd_puts, @function
 674               	lcd_puts:
 675               		.stabd	46,0,0
 495:lcd.c         ****     }
 496:lcd.c         **** 
 497:lcd.c         **** }/* lcd_putc */
 498:lcd.c         **** 
 499:lcd.c         **** 
 500:lcd.c         **** /*************************************************************************
 501:lcd.c         **** Display string without auto linefeed 
 502:lcd.c         **** Input:    string to be displayed
 503:lcd.c         **** Returns:  none
 504:lcd.c         **** *************************************************************************/
 505:lcd.c         **** void lcd_puts(const char *s)
 506:lcd.c         **** /* print string on lcd (no auto linefeed) */
 507:lcd.c         **** {
 676               		.stabn	68,0,507,.LM92-.LFBB13
 677               	.LM92:
 678               	.LFBB13:
 679               	/* prologue: frame size=0 */
 680 0158 CF93      		push r28
 681 015a DF93      		push r29
 682               	/* prologue end (size=2) */
 683 015c EC01      		movw r28,r24
 684 015e 00C0      		rjmp .L83
 685               	.L84:
 508:lcd.c         ****     register char c;
 509:lcd.c         **** 
 510:lcd.c         ****     while ( (c = *s++) ) {
 511:lcd.c         ****         lcd_putc(c);
 686               		.stabn	68,0,511,.LM93-.LFBB13
GAS LISTING /tmp/ccGoRhtD.s 			page 22


 687               	.LM93:
 688 0160 0E94 0000 		call lcd_putc
 689               	.L83:
 690               		.stabn	68,0,510,.LM94-.LFBB13
 691               	.LM94:
 692 0164 8991      		ld r24,Y+
 693 0166 8823      		tst r24
 694 0168 01F4      		brne .L84
 695               	/* epilogue: frame size=0 */
 696 016a DF91      		pop r29
 697 016c CF91      		pop r28
 698 016e 0895      		ret
 699               	/* epilogue end (size=3) */
 700               	/* function lcd_puts size 12 (7) */
 701               		.size	lcd_puts, .-lcd_puts
 702               		.stabs	"c:r(0,2)",64,0,508,24
 703               		.stabn	192,0,0,.LFBB13-.LFBB13
 704               		.stabn	224,0,0,.Lscope13-.LFBB13
 705               	.Lscope13:
 706               		.stabs	"",36,0,0,.Lscope13-.LFBB13
 707               		.stabd	78,0,0
 708               		.stabs	"lcd_puts_p:F(0,15)",36,0,524,lcd_puts_p
 709               		.stabs	"progmem_s:P(0,16)",64,0,522,28
 710               	.global	lcd_puts_p
 711               		.type	lcd_puts_p, @function
 712               	lcd_puts_p:
 713               		.stabd	46,0,0
 512:lcd.c         ****     }
 513:lcd.c         **** 
 514:lcd.c         **** }/* lcd_puts */
 515:lcd.c         **** 
 516:lcd.c         **** 
 517:lcd.c         **** /*************************************************************************
 518:lcd.c         **** Display string from program memory without auto linefeed 
 519:lcd.c         **** Input:     string from program memory be be displayed                                        
 520:lcd.c         **** Returns:   none
 521:lcd.c         **** *************************************************************************/
 522:lcd.c         **** void lcd_puts_p(const char *progmem_s)
 523:lcd.c         **** /* print string from program memory on lcd (no auto linefeed) */
 524:lcd.c         **** {
 714               		.stabn	68,0,524,.LM95-.LFBB14
 715               	.LM95:
 716               	.LFBB14:
 717               	/* prologue: frame size=0 */
 718 0170 CF93      		push r28
 719 0172 DF93      		push r29
 720               	/* prologue end (size=2) */
 721 0174 EC01      		movw r28,r24
 722 0176 00C0      		rjmp .L88
 723               	.L89:
 525:lcd.c         ****     register char c;
 526:lcd.c         **** 
 527:lcd.c         ****     while ( (c = pgm_read_byte(progmem_s++)) ) {
 528:lcd.c         ****         lcd_putc(c);
 724               		.stabn	68,0,528,.LM96-.LFBB14
 725               	.LM96:
 726 0178 0E94 0000 		call lcd_putc
GAS LISTING /tmp/ccGoRhtD.s 			page 23


 727               	.L88:
 728 017c FE01      		movw r30,r28
 729               	.LBB10:
 730               		.stabn	68,0,527,.LM97-.LFBB14
 731               	.LM97:
 732 017e 2196      		adiw r28,1
 733               	/* #APP */
 734 0180 8491      		lpm r24, Z
 735               		
 736               	/* #NOAPP */
 737               	.LBE10:
 738 0182 8823      		tst r24
 739 0184 01F4      		brne .L89
 740               	/* epilogue: frame size=0 */
 741 0186 DF91      		pop r29
 742 0188 CF91      		pop r28
 743 018a 0895      		ret
 744               	/* epilogue end (size=3) */
 745               	/* function lcd_puts_p size 17 (12) */
 746               		.size	lcd_puts_p, .-lcd_puts_p
 747               		.stabs	"__addr16:r(2,4)",64,0,527,30
 748               		.stabs	"__result:r(2,2)",64,0,527,24
 749               		.stabn	192,0,0,.LBB10-.LFBB14
 750               		.stabn	224,0,0,.LBE10-.LFBB14
 751               	.Lscope14:
 752               		.stabs	"",36,0,0,.Lscope14-.LFBB14
 753               		.stabd	78,0,0
 754               		.stabs	"lcd_init:F(0,15)",36,0,543,lcd_init
 755               		.stabs	"dispAttr:P(2,2)",64,0,542,15
 756               	.global	lcd_init
 757               		.type	lcd_init, @function
 758               	lcd_init:
 759               		.stabd	46,0,0
 529:lcd.c         ****     }
 530:lcd.c         **** 
 531:lcd.c         **** }/* lcd_puts_p */
 532:lcd.c         **** 
 533:lcd.c         **** 
 534:lcd.c         **** /*************************************************************************
 535:lcd.c         **** Initialize display and select type of cursor 
 536:lcd.c         **** Input:    dispAttr LCD_DISP_OFF            display off
 537:lcd.c         ****                    LCD_DISP_ON             display on, cursor off
 538:lcd.c         ****                    LCD_DISP_ON_CURSOR      display on, cursor on
 539:lcd.c         ****                    LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
 540:lcd.c         **** Returns:  none
 541:lcd.c         **** *************************************************************************/
 542:lcd.c         **** void lcd_init(uint8_t dispAttr)
 543:lcd.c         **** {
 760               		.stabn	68,0,543,.LM98-.LFBB15
 761               	.LM98:
 762               	.LFBB15:
 763               	/* prologue: frame size=0 */
 764 018c FF92      		push r15
 765 018e 0F93      		push r16
 766 0190 1F93      		push r17
 767               	/* prologue end (size=3) */
 768 0192 F82E      		mov r15,r24
GAS LISTING /tmp/ccGoRhtD.s 			page 24


 544:lcd.c         **** #if LCD_IO_MODE
 545:lcd.c         ****     /*
 546:lcd.c         ****      *  Initialize LCD to 4 bit I/O mode
 547:lcd.c         ****      */
 548:lcd.c         ****      
 549:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 550:lcd.c         ****       && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT =
 551:lcd.c         ****       && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN ==
 552:lcd.c         ****       && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
 553:lcd.c         ****     {
 554:lcd.c         ****         /* configure all port bits as output (all LCD lines on same port) */
 555:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x7F;
 556:lcd.c         ****     }
 557:lcd.c         ****     else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( 
 558:lcd.c         ****            && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_P
 559:lcd.c         ****     {
 560:lcd.c         ****         /* configure all port bits as output (all LCD data lines on same port, but control lines on
 561:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x0F;
 562:lcd.c         ****         DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 563:lcd.c         ****         DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 564:lcd.c         ****         DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 565:lcd.c         ****     }
 566:lcd.c         ****     else
 567:lcd.c         ****     {
 568:lcd.c         ****         /* configure all port bits as output (LCD data and control lines on different ports */
 569:lcd.c         ****         DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 769               		.stabn	68,0,569,.LM99-.LFBB15
 770               	.LM99:
 771 0194 D19A      		sbi 58-0x20,1
 570:lcd.c         ****         DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 772               		.stabn	68,0,570,.LM100-.LFBB15
 773               	.LM100:
 774 0196 D29A      		sbi 58-0x20,2
 571:lcd.c         ****         DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 775               		.stabn	68,0,571,.LM101-.LFBB15
 776               	.LM101:
 777 0198 D09A      		sbi 58-0x20,0
 572:lcd.c         ****         DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 778               		.stabn	68,0,572,.LM102-.LFBB15
 779               	.LM102:
 780 019a D49A      		sbi 58-0x20,4
 573:lcd.c         ****         DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 781               		.stabn	68,0,573,.LM103-.LFBB15
 782               	.LM103:
 783 019c D59A      		sbi 58-0x20,5
 574:lcd.c         ****         DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 784               		.stabn	68,0,574,.LM104-.LFBB15
 785               	.LM104:
 786 019e D69A      		sbi 58-0x20,6
 575:lcd.c         ****         DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 787               		.stabn	68,0,575,.LM105-.LFBB15
 788               	.LM105:
 789 01a0 D79A      		sbi 58-0x20,7
 790               	.LBB21:
 791               	.LBB22:
 792               		.stabn	68,0,102,.LM106-.LFBB15
 793               	.LM106:
GAS LISTING /tmp/ccGoRhtD.s 			page 25


 794 01a2 80E8      		ldi r24,lo8(16000)
 795 01a4 9EE3      		ldi r25,hi8(16000)
 796               	/* #APP */
 797 01a6 0197      		1: sbiw r24,1
 798 01a8 01F4      		brne 1b
 799               	/* #NOAPP */
 800               	.LBE22:
 801               	.LBE21:
 576:lcd.c         ****     }
 577:lcd.c         ****     delay(16000);        /* wait 16ms or more after power-on       */
 578:lcd.c         ****     
 579:lcd.c         ****     /* initial write to lcd is 8bit */
 580:lcd.c         ****     LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 802               		.stabn	68,0,580,.LM107-.LFBB15
 803               	.LM107:
 804 01aa DD9A      		sbi 59-0x20,5
 581:lcd.c         ****     LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 805               		.stabn	68,0,581,.LM108-.LFBB15
 806               	.LM108:
 807 01ac DC9A      		sbi 59-0x20,4
 582:lcd.c         ****     lcd_e_toggle();
 808               		.stabn	68,0,582,.LM109-.LFBB15
 809               	.LM109:
 810 01ae 0E94 0000 		call toggle_e
 811               	.LBB23:
 812               	.LBB24:
 813               		.stabn	68,0,102,.LM110-.LFBB15
 814               	.LM110:
 815 01b2 80E8      		ldi r24,lo8(4992)
 816 01b4 93E1      		ldi r25,hi8(4992)
 817               	/* #APP */
 818 01b6 0197      		1: sbiw r24,1
 819 01b8 01F4      		brne 1b
 820               	/* #NOAPP */
 821               	.LBE24:
 822               	.LBE23:
 583:lcd.c         ****     delay(4992);         /* delay, busy flag can't be checked here */
 584:lcd.c         ****    
 585:lcd.c         ****     /* repeat last command */ 
 586:lcd.c         ****     lcd_e_toggle();      
 823               		.stabn	68,0,586,.LM111-.LFBB15
 824               	.LM111:
 825 01ba 0E94 0000 		call toggle_e
 826               	.LBB25:
 827               	.LBB26:
 828               		.stabn	68,0,102,.LM112-.LFBB15
 829               	.LM112:
 830 01be 00E4      		ldi r16,lo8(64)
 831 01c0 10E0      		ldi r17,hi8(64)
 832 01c2 C801      		movw r24,r16
 833               	/* #APP */
 834 01c4 0197      		1: sbiw r24,1
 835 01c6 01F4      		brne 1b
 836               	/* #NOAPP */
 837               	.LBE26:
 838               	.LBE25:
 587:lcd.c         ****     delay(64);           /* delay, busy flag can't be checked here */
GAS LISTING /tmp/ccGoRhtD.s 			page 26


 588:lcd.c         ****     
 589:lcd.c         ****     /* repeat last command a third time */
 590:lcd.c         ****     lcd_e_toggle();      
 839               		.stabn	68,0,590,.LM113-.LFBB15
 840               	.LM113:
 841 01c8 0E94 0000 		call toggle_e
 842               	.LBB27:
 843               	.LBB28:
 844               		.stabn	68,0,102,.LM114-.LFBB15
 845               	.LM114:
 846 01cc C801      		movw r24,r16
 847               	/* #APP */
 848 01ce 0197      		1: sbiw r24,1
 849 01d0 01F4      		brne 1b
 850               	/* #NOAPP */
 851               	.LBE28:
 852               	.LBE27:
 591:lcd.c         ****     delay(64);           /* delay, busy flag can't be checked here */
 592:lcd.c         **** 
 593:lcd.c         ****     /* now configure for 4bit mode */
 594:lcd.c         ****     LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 853               		.stabn	68,0,594,.LM115-.LFBB15
 854               	.LM115:
 855 01d2 DC98      		cbi 59-0x20,4
 595:lcd.c         ****     lcd_e_toggle();
 856               		.stabn	68,0,595,.LM116-.LFBB15
 857               	.LM116:
 858 01d4 0E94 0000 		call toggle_e
 859               	.LBB29:
 860               	.LBB30:
 861               		.stabn	68,0,102,.LM117-.LFBB15
 862               	.LM117:
 863 01d8 C801      		movw r24,r16
 864               	/* #APP */
 865 01da 0197      		1: sbiw r24,1
 866 01dc 01F4      		brne 1b
 867               	/* #NOAPP */
 868               	.LBE30:
 869               	.LBE29:
 596:lcd.c         ****     delay(64);           /* some displays need this additional delay */
 597:lcd.c         ****     
 598:lcd.c         ****     /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
 599:lcd.c         **** #else
 600:lcd.c         ****     /*
 601:lcd.c         ****      * Initialize LCD to 8 bit memory mapped mode
 602:lcd.c         ****      */
 603:lcd.c         ****     
 604:lcd.c         ****     /* enable external SRAM (memory mapped lcd) and one wait state */        
 605:lcd.c         ****     MCUCR = _BV(SRE) | _BV(SRW);
 606:lcd.c         **** 
 607:lcd.c         ****     /* reset LCD */
 608:lcd.c         ****     delay(16000);                           /* wait 16ms after power-on     */
 609:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
 610:lcd.c         ****     delay(4992);                            /* wait 5ms                     */
 611:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
 612:lcd.c         ****     delay(64);                              /* wait 64us                    */
 613:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
GAS LISTING /tmp/ccGoRhtD.s 			page 27


 614:lcd.c         ****     delay(64);                              /* wait 64us                    */
 615:lcd.c         **** #endif
 616:lcd.c         **** 
 617:lcd.c         **** #if KS0073_4LINES_MODE
 618:lcd.c         ****     /* Display with KS0073 controller requires special commands for enabling 4 line mode */
 619:lcd.c         **** 	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
 620:lcd.c         **** 	lcd_command(KS0073_4LINES_MODE);
 621:lcd.c         **** 	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
 622:lcd.c         **** #else
 623:lcd.c         ****     lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 870               		.stabn	68,0,623,.LM118-.LFBB15
 871               	.LM118:
 872 01de 88E2      		ldi r24,lo8(40)
 873 01e0 0E94 0000 		call lcd_command
 624:lcd.c         **** #endif
 625:lcd.c         ****     lcd_command(LCD_DISP_OFF);              /* display off                  */
 874               		.stabn	68,0,625,.LM119-.LFBB15
 875               	.LM119:
 876 01e4 88E0      		ldi r24,lo8(8)
 877 01e6 0E94 0000 		call lcd_command
 626:lcd.c         ****     lcd_clrscr();                           /* display clear                */ 
 878               		.stabn	68,0,626,.LM120-.LFBB15
 879               	.LM120:
 880 01ea 0E94 0000 		call lcd_clrscr
 627:lcd.c         ****     lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 881               		.stabn	68,0,627,.LM121-.LFBB15
 882               	.LM121:
 883 01ee 86E0      		ldi r24,lo8(6)
 884 01f0 0E94 0000 		call lcd_command
 628:lcd.c         ****     lcd_command(dispAttr);                  /* display/cursor control       */
 885               		.stabn	68,0,628,.LM122-.LFBB15
 886               	.LM122:
 887 01f4 8F2D      		mov r24,r15
 888 01f6 0E94 0000 		call lcd_command
 889               	/* epilogue: frame size=0 */
 890 01fa 1F91      		pop r17
 891 01fc 0F91      		pop r16
 892 01fe FF90      		pop r15
 893 0200 0895      		ret
 894               	/* epilogue end (size=4) */
 895               	/* function lcd_init size 69 (62) */
 896               		.size	lcd_init, .-lcd_init
 897               		.stabs	"__count:r(0,4)",64,0,577,24
 898               		.stabn	192,0,0,.LBB21-.LFBB15
 899               		.stabn	224,0,0,.LBE21-.LFBB15
 900               		.stabs	"__count:r(0,4)",64,0,583,24
 901               		.stabn	192,0,0,.LBB23-.LFBB15
 902               		.stabn	224,0,0,.LBE23-.LFBB15
 903               		.stabs	"__count:r(0,4)",64,0,587,24
 904               		.stabn	192,0,0,.LBB25-.LFBB15
 905               		.stabn	224,0,0,.LBE25-.LFBB15
 906               		.stabs	"__count:r(0,4)",64,0,591,24
 907               		.stabn	192,0,0,.LBB27-.LFBB15
 908               		.stabn	224,0,0,.LBE27-.LFBB15
 909               		.stabs	"__count:r(0,4)",64,0,596,16
 910               		.stabn	192,0,0,.LBB29-.LFBB15
 911               		.stabn	224,0,0,.LBE29-.LFBB15
GAS LISTING /tmp/ccGoRhtD.s 			page 28


 912               	.Lscope15:
 913               		.stabs	"",36,0,0,.Lscope15-.LFBB15
 914               		.stabd	78,0,0
 915               		.stabs	"",100,0,0,.Letext0
 916               	.Letext0:
 917               	/* File "lcd.c": code  299 = 0x012b ( 262), prologues  12, epilogues  25 */
GAS LISTING /tmp/ccGoRhtD.s 			page 29


DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
     /tmp/ccGoRhtD.s:2      *ABS*:0000003f __SREG__
     /tmp/ccGoRhtD.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccGoRhtD.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccGoRhtD.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccGoRhtD.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccGoRhtD.s:81     .text:00000000 toggle_e
     /tmp/ccGoRhtD.s:112    .text:00000008 lcd_write
     /tmp/ccGoRhtD.s:246    .text:0000006a lcd_read
     /tmp/ccGoRhtD.s:371    .text:000000b6 lcd_waitbusy
     /tmp/ccGoRhtD.s:419    .text:000000d2 lcd_backlight
     /tmp/ccGoRhtD.s:451    .text:000000de lcd_command
     /tmp/ccGoRhtD.s:481    .text:000000f2 lcd_data
     /tmp/ccGoRhtD.s:512    .text:00000106 lcd_gotoxy
     /tmp/ccGoRhtD.s:545    .text:00000116 lcd_getxy
     /tmp/ccGoRhtD.s:569    .text:0000011e lcd_clrscr
     /tmp/ccGoRhtD.s:591    .text:00000126 lcd_home
     /tmp/ccGoRhtD.s:614    .text:0000012e lcd_putc
     /tmp/ccGoRhtD.s:674    .text:00000158 lcd_puts
     /tmp/ccGoRhtD.s:712    .text:00000170 lcd_puts_p
     /tmp/ccGoRhtD.s:758    .text:0000018c lcd_init

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
